package XMLParser1;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

class ConfigParser extends DefaultHandler {
	private final Map<String, ConfigObject> maps = Collections
			.synchronizedMap(new LinkedHashMap<String, ConfigObject>());
	private ConfigObject config = new ConfigObject();
	boolean stop = true;

	static final String ENGINE = "engine";
	static final String EXECUTOR = "executor";
	static final String QUEUEMANAGER = "queueManager";
	static final String DATASOURCE = "datasource";
	static final String CHANNEL = "channel";
	Engine eg;
	Executor ec;
	QueueManager qm;
	DataSource ds;
	Channel c;
	
	public ConfigParser(File configFile) throws Exception {
		parse(configFile);
	}

	public void parse(File configFile) throws Exception {
		synchronized (maps) {
			if (maps.size() > 0) {
				maps.clear();
			}
			SAXParserFactory spf = SAXParserFactory.newInstance();
			SAXParser saxp = spf.newSAXParser();
			saxp.parse(configFile, this);
		}
	}

	public void startElement(String uri, String localName, String qName, Attributes attr) throws SAXException {
		if (ENGINE.equals(qName)) {
			try {
				Engine engine = new Engine(attr);

				config.setEngine(engine);

				maps.put(eg.MAGICONELOGGER, config);
			} catch (Exception e) {
			}

		} else if (EXECUTOR.equals(qName)) {
			try {
				Executor executor = new Executor(attr);

				config.setExecutor(executor);

				maps.put(ec.EXECUTEQUEUEMAXSIZE, config);
			} catch (Exception e) {
			}

		} else if (QUEUEMANAGER.equals(qName)) {
			try {
				QueueManager queueManager = new QueueManager(attr);

				config.setQueueManager(queueManager);

				maps.put(qm.RERUNREQUESTONSTART, config);
			} catch (Exception e) {
			}

		} else if (DATASOURCE.equals(qName)) {
			try {
				DataSource dataSource = new DataSource(attr);

				config.setDataSource(dataSource);

				maps.put(ds.ACQUIREINCREMENT, config);
			} catch (Exception e) {
			}

		} else if (CHANNEL.equals(qName)) {
			try {
				Channel channel = new Channel(attr);

				config.setChannel(channel);

				maps.put(c.NAME, config);
			} catch (Exception e) {
			}

		}
	}

	private String getAttribute(Attributes attr, String name) {
		String o = attr.getValue(name);
		return o == null ? "" : o;
	}

	private int getAttributeInt(Attributes attr, String name, int defaultValue) {
		try {
			String o = attr.getValue(name);
			return Integer.parseInt(o);
		} catch (Exception e) {
			return defaultValue;
		}
	}

	private String getAttributeBool(Attributes attr, String name, String defaultValue) {

		String o = attr.getValue(name);
		return o == "true" ? "ture" : defaultValue;
	}

	public Engine getEngine() {
		return config.getEngine();
	}

	public Executor getExecutor() {
		return config.getExecutor();
	}

	public QueueManager getQueueManager() {
		return config.getQueueManager();
	}

	public LinkedList<DataSource> getDataSources() {
		return config.getDataSource();
	}

	public DataSource getDataSource(String name) {
		while (stop) {
			int i = 0;
			i++;
			if (config.getDataSource().get(i).getjndiName().contentEquals(name)) {
				return config.getDataSource().get(i);
			}
			break;
		}
		return null;
	}

	public LinkedList<Channel> getChannels() {
		return config.getChannel();
	}

	public Channel getChannel(String name) {
		while (stop) {
			int i = 0;
			i++;
			if (config.getChannel().get(i).getname().contentEquals(name)) {
				return config.getChannel().get(i);
			}
			break;
		}
		return null;
	}

	public ConfigObject getConfigObject() {
		return config;
	}
}
